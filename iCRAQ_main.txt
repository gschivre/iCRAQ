//iCRAQ stand for imageJ Chromocenter Recognition And Quantification
run("Action Bar","/macros/iCRAQ/iCRAQ_main.txt");
exit();

<startupAction>
requires("1.52r")
setBackgroundColor(0, 0, 0);
run("Set Measurements...", "redirect=None");
run("FeatureJ Options", "progress");
call("ij.Prefs.set", "variable.macro.nucleus.nNuc", 0);
//print("This macro use FeatureJ, ActionBar, interactive h-watershed morpholibJ and 3D suite plugins !");
if(nImages()>0) {
	run("Select None");
	run("Remove Overlay");
}
roiManager("reset");
setBatchMode(true);
//Get IDs of all opened images
ImgNamearr=newArray(nImages);
for(i=0; i<nImages; ++i){
	selectImage(i+1);
	temp=getImageID();
	ImgNamearr[i]=temp;
}
call("ij.Prefs.set", "variable.macro.nucleus.openImg", String.join(ImgNamearr,","));
call("ij.Prefs.set", "variable.macro.nucleus.rad", 15);
call("ij.Prefs.set", "variable.macro.nucleus.proj", "Standard Deviation");
call("ij.Prefs.set", "variable.macro.nucleus.threshnuc", "Li");
call("ij.Prefs.set", "variable.macro.nucleus.MinNuc", 0);
call("ij.Prefs.set", "variable.macro.nucleus.sfanuc", false);
call("ij.Prefs.set", "variable.macro.nucleus.enlarge", 15);
call("ij.Prefs.set", "variable.macro.nucleus.radchr", 3);
call("ij.Prefs.set", "variable.macro.nucleus.FJsmooth", 1.0);
call("ij.Prefs.set", "variable.macro.nucleus.FJint", 3.0);
call("ij.Prefs.set", "variable.macro.nucleus.MinChr", 0);
call("ij.Prefs.set", "variable.macro.nucleus.MaxChr", 1);
call("ij.Prefs.set", "variable.macro.nucleus.bitdepth", "8-bit");
call("ij.Prefs.set", "variable.macro.nucleus.Starts", 0);
call("ij.Prefs.set", "variable.macro.nucleus.Ends", 0);
setBatchMode(false);
</startupAction>

<codeLibrary>
//Append new value to existing array
function appendarr(arr, value) {
	arr2 = newArray(arr.length+1);
	for (i=0; i<arr.length; i++){
		arr2[i] = arr[i];
	}
	arr2[arr.length] = value;
	return arr2;
}
//Give ROI index of the ROI named [roiName]
function findRoiWithName(roiName) { 
	nR = roiManager("Count"); 
	for (i=0; i<nR; i++) { 
		roiManager("Select", i); 
		rName = Roi.getName(); 
		if (matches(rName, roiName)) { 
			return i; 
		} 
	} 
	return -1; 
}
//Return the index in n digit format
function nDigitsIndex(val,n){
	arr=newArray(n);
	val=toString(val);
	trail=n-val.length;
	for(i=0; i<trail; ++i){
		arr[i]="0";
	}
	stridx=0;
	for(i=trail; i<n; ++i){
		arr[i]=substring(val, stridx, stridx+1);
		stridx=stridx+1;
	}
	return String.join(arr, "")
}
//Close image but specified one
function closeBut(id,type){
	setBatchMode(true);
	remainImages=nImages;
	while(remainImages>id.length){
		imID=newArray(nImages);
		for(i=0; i<nImages; ++i){
			selectImage(i+1);
			if(type=="id"){
				imID[i]=getImageID();
			}
			else if(type=="title"){
				imID[i]=getTitle();		
			}
		}
		for(i=0; i<nImages; ++i){
			arr=newArray(id.length);
			for(j=0; j<id.length; ++j){
				if(type=="id"){
					test=imID[i]==id[j];
				}
				else{
					test=matches(imID[i],id[j]);
				}
				if(!test){
					arr[j]=1;
				}
				else{
					arr[j]=0;
				}
			}
			if(sum(arr)==arr.length){
				selectImage(imID[i]);  		
         			close();
     			}
		}
	remainImages=nImages;
	}
	setBatchMode(false);
}
//Close non image windows
function closeWindow(){
	setBatchMode(true);
	windowlist=getList("window.titles");
	for(i=0; i<windowlist.length; ++i){
		if(!matches(windowlist[i],".*ROI.*")){
			close(windowlist[i]);
		}
	}
	setBatchMode(false);
}
//Count files in folder
function countFiles(dir) {
	list = getFileList(dir);
	count=0;
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/")){
			count=count+countFiles(""+dir+list[i]);
		}
		else{
			count++;
		}
	}
	return count;
}
//Sum of an array
function sum(arr){
	s=0;
	for(i=0; i<arr.length; ++i){
		s=s+arr[i];	
	}
	return s;
}
//Remove val from array
function removearr(arr, val){
	arr1=newArray(0);
	find=false;
	i=0;
	while(!find){
		find=matches(arr[i],val);
		if(!find){
			arr1=appendarr(arr1,arr[i]);
		}
		i=i+1;
	}
	while(i<arr.length){
		arr1=appendarr(arr1,arr[i]);
	}
	return arr1;
}
//Find row with given label in result table but don't work !!
function findRow(lab){
	find=false;
	i=0;
	while(!find&&i<nResults){ 
		rowID=getResult("Label",i);
		print(rowID);
		find=matches(rowID,lab);
		i=i+1;
	}
	if(find){
		return i;
	}
	else{
		return -1;
	}
}
//Compute the un-nomalized GLCM (mean on the 4 directions) on 8-bit image on ROI with offset
function GLCM(img,roi,offset){
	setBatchMode(true);
	selectImage(img);
	roiManager("Select", roi);
	//Ignore pixels on the outline band of offset pixels
	shrk=-offset;
	run("Enlarge...", "enlarge=&shrk pixel");
	glcm=newArray(256*256);
	Array.fill(glcm, 0);
	Roi.getContainedPoints(x, y);
	for(i=0; i<x.length; ++i){
		ref=getValue(x[i], y[i]);
		//0째 direction
		dir=getValue(x[i]+offset, y[i]);
		glcm[dir + ref*256]=glcm[dir + ref*256]+0.25;
		//45째 direction
		dir=getValue(x[i]+offset, y[i]+offset);
		glcm[dir + ref*256]=glcm[dir + ref*256]+0.25;
		//90째 direction
		dir=getValue(x[i], y[i]+offset);
		glcm[dir + ref*256]=glcm[dir + ref*256]+0.25;
		//135째 direction
		dir=getValue(x[i]-offset, y[i]+offset);
		glcm[dir + ref*256]=glcm[dir + ref*256]+0.25;
	}
	return glcm;
}
</codeLibrary>

<DnDAction>
file=getArgument();
open(file);
//Get IDs of all opened images
ImgNamearr=newArray(nImages);
for(i=0; i<nImages; ++i){
	selectImage(i+1);
	temp=getImageID();
	ImgNamearr[i]=temp;
}
call("ij.Prefs.set", "variable.macro.nucleus.openImg", String.join(ImgNamearr,","));
</DnDAction>

<line>
<button>
label=Option
icon=noicon
arg=<macro>
var methods=getList("threshold.methods");
Dialog.create("Options");
Dialog.addMessage("Choose settings for nucleus/chromocenters segmentation");
//sufficiently large to smooth out chromocenters
Dialog.addNumber("Median filter size (pixels):", 15);
//Std is ok !
Dialog.addChoice("Projection Type:", newArray("Standard Deviation", "Max Intensity"));
//Default Li
Dialog.addChoice("Nucleus Threshold Method:", methods, "Li");
//Circle with radius of about 50 pixels --> 8000
Dialog.addNumber("Nucleus minimum size (pixels^2):", 0);
//To display the adjust threshold window
Dialog.addCheckbox("Show", false);
//How many pixel to take outside of nucleus to crop
Dialog.addNumber("Enlarge nucleus for croping by (pixels):", 15);
//Median smoothing not very usefull
Dialog.addNumber("Median filter size for chromocenter (pixels):", 3);
//Parameters for FeatureJ
Dialog.addNumber("FeatureJ smoothing:", 1.0);
Dialog.addNumber("FeatureJ integration:", 3.0);
//Circle with radius of about 3 pixels --> 30
Dialog.addNumber("Chromocenter minimum size (pixels^2):", 0);
//This will avoid to detect nucleus as chromocenter when there is no chromocenter
Dialog.addNumber("Chromocenter maximum size (% of nucleus):", 1);
//Best working on 8-bit for speed
Dialog.addChoice("Threshold On:", newArray("8-bit", "16-bit"));
Dialog.show();
rad=Dialog.getNumber();
proj=Dialog.getChoice();
threshnuc=Dialog.getChoice();
MinNuc=Dialog.getNumber();
sfanuc=Dialog.getCheckbox();
enlarge=Dialog.getNumber();
radchr=Dialog.getNumber();
FJsmooth=Dialog.getNumber();
FJint=Dialog.getNumber();
MinChr=Dialog.getNumber();
MaxChr=Dialog.getNumber();
bitdepth=Dialog.getChoice();
call("ij.Prefs.set", "variable.macro.nucleus.rad", rad);
call("ij.Prefs.set", "variable.macro.nucleus.proj", proj);
call("ij.Prefs.set", "variable.macro.nucleus.threshnuc", threshnuc);
call("ij.Prefs.set", "variable.macro.nucleus.MinNuc", MinNuc);
call("ij.Prefs.set", "variable.macro.nucleus.sfanuc", sfanuc);
call("ij.Prefs.set", "variable.macro.nucleus.enlarge", enlarge);
call("ij.Prefs.set", "variable.macro.nucleus.radchr", radchr);
call("ij.Prefs.set", "variable.macro.nucleus.FJsmooth", FJsmooth);
call("ij.Prefs.set", "variable.macro.nucleus.FJint", FJint);
call("ij.Prefs.set", "variable.macro.nucleus.MinChr", MinChr);
call("ij.Prefs.set", "variable.macro.nucleus.MaxChr", MaxChr);
call("ij.Prefs.set", "variable.macro.nucleus.bitdepth", bitdepth);
</macro>
</line>

<line>
<button>
label=Detect Nucleus
icon=noicon
arg=<macro>
//this will first z-project the stack then do watershed segmentation to get all nucleus bouding boxes
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var rad=call("ij.Prefs.get","variable.macro.nucleus.rad",15);
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var threshnuc=call("ij.Prefs.get","variable.macro.nucleus.threshnuc","Li");
threshnuc=threshnuc+" dark";
var MinNuc=call("ij.Prefs.get","variable.macro.nucleus.MinNuc",0);
var sfanuc=!call("ij.Prefs.get","variable.macro.nucleus.sfanuc",true);
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
var bitdepth=call("ij.Prefs.get","variable.macro.nucleus.bitdepth","8-bit");
id=getImageID();
run("Grays");
if(sfanuc){
	setBatchMode(true);
	run("Z Project...", "projection=["+proj+"]");
	run("Median...", "radius=&rad");
	run(bitdepth);
	setAutoThreshold(threshnuc);
	getThreshold(lower, upper);
	setThreshold(lower, upper);
	run("Create Mask");
}
else{
	run("Z Project...", "projection=["+proj+"]");
	setBatchMode(true);
	run("Median...", "radius=&rad");
	run(bitdepth);
	setAutoThreshold(threshnuc);
	run("Threshold...");
	waitForUser("Adjust threshold, apply then click OK.");
	close("Threshold");
}
run("Fill Holes");
run("Watershed");
//best to remove borders nucelus
run("Analyze Particles...", "size=&MinNuc-Infinity pixel exclude add");
selectImage(id);
closeBut(openImg,"id");
newNuc=roiManager("count")-nNuc;
for(i=nNuc; i<roiManager("count"); ++i){
	roiManager("Select", i);
	idx=i+1;
	idx=nDigitsIndex(idx,3);
	roiManager("rename","Nuc_"+idx);
}
call("ij.Prefs.set", "variable.macro.nucleus.nNuc", nNuc+newNuc);
roiManager("Show All with labels");
roiManager("Deselect");
setBatchMode(false);
</macro>
</line>

<line>
<button>
label=Level Set Nucleus Detection
icon=noicon
arg=<macro>
//May be too handy with all the parameter
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var rad=call("ij.Prefs.get","variable.macro.nucleus.rad",15);
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var MinNuc=call("ij.Prefs.get","variable.macro.nucleus.MinNuc",0);
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
//Ask for level set parameter
Dialog.create("Level Set");
Dialog.addMessage("Choose settings for level set segmentation");
Dialog.addNumber("advection:", 2.20);
Dialog.addNumber("propagation:", 1.00);
Dialog.addNumber("curvature:", 1.00);
Dialog.addNumber("grayscale:", 30);
Dialog.addNumber("convergence:", 0.005);
Dialog.addChoice("region:", newArray("outside", "inside"));
Dialog.show();
adv = Dialog.getNumber();
prop = Dialog.getNumber();
curv = Dialog.getNumber();
gscale = Dialog.getNumber();
conv = Dialog.getNumber();
reg  = Dialog.getChoice();
id=getImageID();
run("Grays");
run("Z Project...", "projection=["+proj+"]");
roiManager("Show All Without Labels");
waitForUser("Use freehand selection to define a coarse nucleus inline/outline, then click OK.");
setBatchMode(true);
run("Fit Spline");
roiManager("add");
roiManager("select", roiManager("count")-1);
run("Select None");
run("Median...", "radius=&rad");
run("8-bit");
roiManager("select", roiManager("count")-1);
run("Level Sets", "method=[Active Contours] use_level_sets advection=&adv propagation=&prop curvature=&curv grayscale=&gscale convergence=&conv region=&reg");
roiManager("Delete");
selectWindow("Log");
run("Close");
run("Invert");
run("Fill Holes");
run("Create Selection");
roiManager("Add");
roiManager("select", roiManager("count")-1);
nucArea=getValue("Area raw");
if(nucArea<MinNuc){
	roiManager("Delete");
}
else{
	nNuc=nNuc+1;
	call("ij.Prefs.set", "variable.macro.nucleus.nNuc", nNuc);
	idx=nDigitsIndex(nNuc,3);
	roiManager("rename","Nuc_"+idx);
	roiManager("Deselect");
}
selectImage(id);
closeBut(openImg,"id");
roiManager("Show All with labels");
setBatchMode(false);
</macro>
</line>

<line>
<button>
label=Manualy Add Nucleus
icon=noicon
arg=<macro>
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var MinNuc=call("ij.Prefs.get","variable.macro.nucleus.MinNuc",0);
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
id=getImageID();
run("Z Project...", "projection=["+proj+"]");
run("mpl-inferno");
roiManager("Show All Without Labels");
waitForUser("Use freehand selection to define nucleus outline, then click OK.");
roiManager("add");
roiManager("select", roiManager("count")-1);
nucArea=getValue("Area raw");
if(nucArea<MinNuc){
	roiManager("Delete");
}
else{
	nNuc=nNuc+1;
	call("ij.Prefs.set", "variable.macro.nucleus.nNuc", nNuc);
	idx=nDigitsIndex(nNuc,3);
	roiManager("rename","Nuc_"+idx);
}
selectImage(id);
roiManager("Show All with labels");
closeBut(openImg,"id");
</macro>
</line>

<line>
<button>
label=Remove Nucleus
icon=noicon
arg=<macro>
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
var Starts=call("ij.Prefs.get","variable.macro.nucleus.Starts", 0);
if(Starts==0){
	Starts=newArray(nNuc);
}
else{
	Starts=split(Starts, ",");
}
var Ends=call("ij.Prefs.get", "variable.macro.nucleus.Ends", 0);
if(Ends==0){
	Ends=newArray(nNuc);
}
else{
	Ends=split(Ends, ",");
}
if(nNuc==0){
	print("No Nucleus detected");
}
else{
	id=getImageID();
	run("Z Project...", "projection=["+proj+"]");
	roiManager("Show All with labels");
	waitForUser("Select the ROI of the unwanted nucleus, then click OK.");
	dName=Roi.getName();
	//If ROI is not a nucleus
	if(!matches(dName,"Nuc.*")){
		print("Choose a nucleus ROI");
	}
	else{
		indexnuc=-1;
		index=roiManager("index")+1;
		for(i=0; i<index; i++){
			roiManager("Select",i);
			rName=Roi.getName();
			if(!matches(rName,".*Chr.*")){
				indexnuc++;
			}
		}
		Starts=Array.deleteIndex(Starts, indexnuc);
		Ends=Array.deleteIndex(Ends, indexnuc);
		//Delete nucleus and associated chromocenter if exist
		todel=newArray(0);
		todel=appendarr(todel, dName);
		for(i=0; i<roiManager("count"); ++i){
			roiManager("Select",i);
			rName=Roi.getName();
			if(matches(rName,dName+"_Chr.*")){
				todel=appendarr(todel, rName);
			}
		}
		for(i=0; i<todel.length; ++i){
			delidx=findRoiWithName(todel[i]);
			roiManager("Select",delidx);
			roiManager("Delete");
		}
		nNuc=nNuc-1;
		selectImage(id);
		setBatchMode(true);
		//Rename Nucleus
		cpt=0;
		for(i=0; i<roiManager("count"); ++i){
			roiManager("Select", i);
			rName=Roi.getName();
			if(!matches(rName,".*Chr.*")){
				cpt=cpt+1;
				idx=nDigitsIndex(cpt,3);
				roiManager("rename","Nuc_"+idx);
			}
			else{
				rName=Roi.getName();
				rNamearr=split(rName,"_");
				roiManager("rename","Nuc_"+idx+"_"+rNamearr[2]+"_"+rNamearr[3]);
			}
		}
		roiManager("sort");
		roiManager("Show All with labels");
		closeBut(openImg,"id");
		call("ij.Prefs.set", "variable.macro.nucleus.nNuc", nNuc);
		call("ij.Prefs.set", "variable.macro.nucleus.Starts", String.join(Starts,","));
		call("ij.Prefs.set", "variable.macro.nucleus.Ends", String.join(Ends,","));
	}
	setBatchMode(false);
}
</macro>
</line>

<line>
<button>
label=Fuse Nucleus
icon=noicon
arg=<macro>
//Fuse ROI of nucleus together mainly to delete them don't use after chromocenter detection
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
if(nNuc==0){
	print("No Nucleus detected");
}
else{
	id=getImageID();
	run("Z Project...", "projection=["+proj+"]");
	roiManager("Show All with labels");
	//Create a name-array with all nucleus roi
	namearr=newArray(0);
	for(i=0; i<roiManager("count"); ++i){
		roiManager("Select",i); 
		rName=Roi.getName();
		if(!matches(rName,".*Chr.*")){
			namearr=appendarr(namearr, rName);
		}
	}
	Dialog.create("Select the ROI of the nucleus that need to be fused");
	for(i=0; i<namearr.length; ++i){
		Dialog.addCheckbox(namearr[i],false);
	}
	Dialog.show();
	idx=newArray(0);
	for(i=0; i<namearr.length; ++i){
		roiselect=Dialog.getCheckbox();
		if(roiselect){
			nucROI=findRoiWithName(namearr[i]);
			idx=appendarr(idx,nucROI);
		}
	}
	if(idx.length<2){
		print("Select at least 2 ROIs");
	}
	else{
		setBatchMode(true);
		roiManager("select",idx);
		roiManager("Combine");
		run("Create Mask");
		//Dilate then erode to fill 1pix space between ROIs
		run("Dilate");
		run("Erode");
		run("Create Selection");
		roiManager("add");
		roiManager("select",idx);
		roiManager("delete");
		nNuc=nNuc-idx.length+1;
		selectImage(id);
		//Rename Nucleus
		for(i=0; i<nNuc; ++i){
			roiManager("Select", i);
			idx=i+1;
			idx=nDigitsIndex(idx,3);
			roiManager("rename","Nuc_"+idx);
		}
		roiManager("Show All with labels");
		closeBut(openImg,"id");
		call("ij.Prefs.set", "variable.macro.nucleus.nNuc", nNuc);
		setBatchMode(false);
	}
}
</macro>
</line>

<line>
<button>
label=Detect Chromocenter
icon=noicon
arg=<macro>
//This will detect the chromocenters and store them in ROI manager close to the associated nucleus
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var enlarge=call("ij.Prefs.get","variable.macro.nucleus.enlarge",15);
var radchr=call("ij.Prefs.get","variable.macro.nucleus.radchr",3);
var FJsmooth=call("ij.Prefs.get", "variable.macro.nucleus.FJsmooth", 1.0);
var FJint=call("ij.Prefs.get", "variable.macro.nucleus.FJint", 3.0);
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
var bitdepth=call("ij.Prefs.get","variable.macro.nucleus.bitdepth","8-bit");
var MinChr=call("ij.Prefs.get","variable.macro.nucleus.MinChr",0.0);
var MaxChr=call("ij.Prefs.get", "variable.macro.nucleus.MaxChr",1.0);
//Initialize Starts and Ends array to store start and end slices
Starts=newArray(nNuc);
Ends=newArray(nNuc);
//Default end slice
endslice=nSlices();
//Change LUT to increase visibility
id=getImageID();
run("mpl-inferno");
setBatchMode(true);
//Create a name-array with all nucleus roi
namearr=newArray(0);
for(i=0; i<roiManager("count"); ++i){
	roiManager("Select",i); 
	rName=Roi.getName();
	if(!matches(rName,".*Chr.*")){
		namearr=appendarr(namearr, rName);
	}
}
xprev=newArray(namearr.length);
yprev=newArray(namearr.length);
for(i=0; i<namearr.length; ++i){
	run("Select None");
	Overlay.hide();
	selectImage(id);
	nucROI=findRoiWithName(namearr[i]);
	roiManager("Select", nucROI);
	nucArea=getValue("Area raw");
	nucArea=round(nucArea*MaxChr);
	run("Enlarge...", "enlarge=&enlarge pixel");
	roiManager("add");
	nROI=roiManager("count");
	roiManager("select", nROI-1);
	Roi.getBounds(xshift, yshift, width, height);
	run("Duplicate...", "duplicate");
	namedup=getTitle();
	idup=getImageID();
	//Ask for start and end slice of the current nucleus and store them
	Dialog.createNonBlocking("Start/End slice");
	Dialog.addMessage("Choose start and end slice for "+namearr[i]);
	Dialog.addNumber("Start slice:", 1);
	Dialog.addNumber("End slice:", endslice);
	Dialog.show();
	start=Dialog.getNumber();
	Starts[i]=start;
	end=Dialog.getNumber();
	Ends[i]=end;
	run("Z Project...", "start=&start stop=&end projection=["+proj+"]");
	idproj=getImageID();
	setBatchMode("show");
	roiManager("Delete");
	selectImage(idup);
	run("FeatureJ Structure", "largest middle smallest smoothing=&FJsmooth integration=&FJint");
	//Normalize structure eigenvalues
	smallest=namedup+" smallest structure eigenvalues";
	selectWindow(smallest);
	Stack.getStatistics(voxelCount, mean, min, max, stdDev);
	run("Divide...", "value=&max");
	middle=namedup+" middle structure eigenvalues";
	selectWindow(middle);
	Stack.getStatistics(voxelCount, mean, min, max, stdDev);
	run("Divide...", "value=&max");
	largest=namedup+" largest structure eigenvalues";
	selectWindow(largest);
	Stack.getStatistics(voxelCount, mean, min, max, stdDev);
	run("Divide...", "value=&max");
	imageCalculator("Add create 32-bit stack",smallest,middle);
	res=getTitle();
	imageCalculator("Add create 32-bit stack",res,largest);
	run("Z Project...", "start=&start stop=&end projection=["+proj+"]");
	close("Result of*");
	run(bitdepth);
	setBatchMode(false);
	run("Interactive H_Watershed");
	selectImage(idproj);
	run(bitdepth);
	run("mpl-inferno"); //run("Invert");
	Dialog.createNonBlocking("Chromocenter Detection");
	Dialog.addChoice("No chromocenter ?", newArray("No","Yes"));
	Dialog.show();
	nocc=Dialog.getChoice();
	waitForUser("Adjust h-watershed then export mask and clic OK");
	setBatchMode(true);
	if(nocc=="No"){
		namedmask=getTitle();
		roiManager("Select", nucROI);
		//store nucleus ROI location
		Roi.getBounds(x, y, width, height);
		xprev[i]=x;
		yprev[i]=y;
		//Need to move the ROI when it is to close from the image upper-left corner
		Roi.move(enlarge, enlarge);
		run("Create Mask");
		imageCalculator("Multiply create", "Mask",namedmask);
		run("Analyze Particles...", "size=&MinChr-&nucArea pixel add");
		nChr=roiManager("count")-nROI;
		cpt=0;
		chridxarr=newArray(nChr+1);
		for(j=nROI-1; j<roiManager("count"); ++j){
			chridxarr[cpt]=j;
			roiManager("Select", j);
			Roi.getBounds(x, y, width, height);
			Roi.move(x+xshift, y+yshift);
			cpt=cpt+1;
			idx=nDigitsIndex(cpt,3);
			roiManager("rename",namearr[i]+"_Chr_"+idx);
		}
		if(nChr+1>1){
			roiManager("Select", chridxarr);
			roiManager("Combine");
			roiManager("add");
			roiManager("Select", roiManager("count")-1);
			roiManager("rename",namearr[i]+"_Chr_"+"sum");
		}
	}
	else{
		roiManager("Select", nucROI);
		//store nucleus ROI location
		Roi.getBounds(x, y, width, height);
		xprev[i]=x;
		yprev[i]=y;
	}
	selectImage(id);
	closeBut(openImg,"id");
	closeWindow();
	roiManager("Show All Without Labels");
	roiManager("Deselect");
}
for(i=0; i<namearr.length; ++i){
	selectImage(id);
	nucROI=findRoiWithName(namearr[i]);
	roiManager("Select", nucROI);
	Roi.move(xprev[i], yprev[i]);
}
roiManager("sort");
call("ij.Prefs.set", "variable.macro.nucleus.Starts", String.join(Starts,","));
call("ij.Prefs.set", "variable.macro.nucleus.Ends", String.join(Ends,","));
setBatchMode(false);
</macro>
</line>

<line>
<button>
label=Manualy add Chromocenter
icon=noicon
arg=<macro>
//This will allow to use the free hand drawing tool to manualy add a chromocenter
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var MinChr=call("ij.Prefs.get","variable.macro.nucleus.MinChr",0.0);
var MaxChr=call("ij.Prefs.get", "variable.macro.nucleus.MaxChr",1.0);
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
if(nNuc==0){
	print("No Nucleus detected");
}
else {
	id=getImageID();
	run("Z Project...", "projection=["+proj+"]");
	run("mpl-inferno");
	roiManager("Show All Without Labels");
	if(nNuc==1){
		indexnuc=0;
		roiManager("select", indexnuc);
		nucName=Roi.getName();
		nucArea=getValue("Area raw");
	}
	else{
		waitForUser("Select the ROI of the nucleus that contain the chromocenter, then click OK.");
		nucName=Roi.getName();
		indexnuc=findRoiWithName(nucName);
		nucArea=getValue("Area raw");
	}
	//If ROI is not a nucleus
	if(matches(nucName,".*Chr.*")){
		print("Choose a nucleus ROI");
	}
	else{
		setBatchMode(true);
		nextindex=indexnuc+1;
		if(nextindex<roiManager("count")){
			roiManager("Select",nextindex);
			nextName=Roi.getName();
		}
		else{
			nextName="end";
		}
		//The chosen nucleus as no chromocenter yet
		if(!matches(nextName,".*Chr.*")){
			//Need to add and delete the nucleus ROI otherwise I can't deselect it !
			roiManager("Add");
			roiManager("Delete");
			waitForUser("Use freehand selection to define chromocenter outline, then click OK.");
			roiManager("add");
			roiManager("select", roiManager("count")-1);
			chrArea=getValue("Area raw");
			if(chrArea<MinChr){
				roiManager("Delete");
			}
			else if (chrArea/nucArea>MaxChr){
				roiManager("Delete");
			}
			else{
				idx=nDigitsIndex(1,3);
				roiManager("rename",nucName+"_Chr_"+idx);
			}
		}
		else{
			//Count the number of chromocenter of the nucleus
			index=indexnuc+1;
			roiManager("Select",index);
			rName=Roi.getName();
			nChr=1;
			chridxarr=newArray(0);
			while(matches(rName,nucName+"_Chr.*")&&!matches(rName,nucName+"_Chr_sum")){
				chridxarr=appendarr(chridxarr, index);
				index++;
				if(index<roiManager("count")){
					roiManager("Select",index);
					rName=Roi.getName();
					if(matches(rName,nucName+"_Chr.*")&&!matches(rName,nucName+"_Chr_sum")){
						nChr++;
					}
				}
				else{
					rName="end";
				}
			}
			if(nChr>1){
				//Remove the sum
				delidx=findRoiWithName(nucName+"_Chr_sum");
				roiManager("Select",delidx);
				roiManager("Delete");
				waitForUser("Use freehand selection to define chromocenter outline, then click OK.");
				roiManager("add");
				roiManager("select", roiManager("count")-1);
				chrArea=getValue("Area raw");
				if(chrArea<MinChr){
					roiManager("Delete");
				}
				else if (chrArea/nucArea>MaxChr){
					roiManager("Delete");
				}
				else{
					chridxarr=appendarr(chridxarr, roiManager("count")-1);
					idx=nDigitsIndex(nChr+1,3);
					roiManager("rename",nucName+"_Chr_"+idx);
					roiManager("Select", chridxarr);
					roiManager("Combine");
					roiManager("add");
					roiManager("Select", roiManager("count")-1);
					roiManager("rename",nucName+"_Chr_"+"sum");
				}
			}
			else{
				waitForUser("Use freehand selection to define chromocenter outline, then click OK.");
				roiManager("add");
				roiManager("select", roiManager("count")-1);
				chrArea=getValue("Area raw");
				if(chrArea<MinChr){
					roiManager("Delete");
				}
				else if (chrArea/nucArea>MaxChr){
					roiManager("Delete");
				}
				else{
					chridxarr=appendarr(chridxarr, roiManager("count")-1);
					idx=nDigitsIndex(nChr+1,3);
					roiManager("rename",nucName+"_Chr_"+idx);
					roiManager("Select", chridxarr);
					roiManager("Combine");
					roiManager("add");
					roiManager("Select", roiManager("count")-1);
					roiManager("rename",nucName+"_Chr_"+"sum");
				}
			}
		}
	}
	roiManager("sort");
	setBatchMode(false);
	selectImage(id);
	roiManager("Show All with labels");
	closeBut(openImg,"id");
}
</macro>
</line>

<line>
<button>
label=Remove Chromocenter
icon=noicon
arg=<macro>
//This will allow to remove a chromocenter
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
openImg=split(openImg, ",");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
var nNuc=call("ij.Prefs.get","variable.macro.nucleus.nNuc",0);
nNuc=parseInt(nNuc);
if(nNuc==0){
	print("No Nucleus detected");
}
else{
	id=getImageID();
	run("Z Project...", "projection=["+proj+"]");
	roiManager("Show All with labels");
	waitForUser("Select the ROI of the unwanted chromocenter, then click OK.");
	dName=Roi.getName();
	//If ROI is a nucleus
	if(!matches(dName,".*Chr.*")){
		print("Choose a chromocenter ROI");
	}
	else{
		setBatchMode(true);
		//Find the nucleus associated with the selected chromocenter
		nucName=split(dName,"_");
		nucName=nucName[0]+"_"+nucName[1];
		indexnuc=findRoiWithName(nucName);
		nextindex=findRoiWithName(dName)+1;
		if(nextindex<roiManager("count")){
			roiManager("Select",nextindex);
			nextName=Roi.getName();
		}
		else{
			nextName="end";
		}
		delidx=findRoiWithName(dName);
		//If ROI is a chromocenter sum remove all chromocenter
		if(matches(dName,".*sum")){
			todel=newArray(0);
			index=indexnuc+1;
			roiManager("Select",index);
			rName=Roi.getName();
			while(matches(rName,nucName+"_Chr.*")){
				todel=appendarr(todel, rName);
				index++;
				if(index<roiManager("count")){
					roiManager("Select",index);
					rName=Roi.getName();
				}
				else{
					rName="end";
				}
			}
			for(i=0; i<todel.length; ++i){
				delidx=findRoiWithName(todel[i]);
				roiManager("Select",delidx);
				roiManager("Delete");
			}
		}
		//If the selected chromocenter ROI is the only one of the nucleus
		else if(!matches(nextName,".*Chr.*")){
			roiManager("Select",delidx);
			roiManager("Delete");
		}
		else{
			roiManager("Select",delidx);
			roiManager("Delete");
			delidx=findRoiWithName(nucName+"_Chr_sum");
			roiManager("Select",delidx);
			roiManager("Delete");
			index=indexnuc+1;
			roiManager("Select",index);
			rName=Roi.getName();
			cpt=1;
			chridxarr=newArray(0);
			while(matches(rName,nucName+"_Chr.*")){
				chridxarr=appendarr(chridxarr, index);
				idx=nDigitsIndex(cpt,3);
				roiManager("rename",nucName+"_Chr_"+idx);
				index++;
				if(index<roiManager("count")){
					roiManager("Select",index);
					rName=Roi.getName();
					if(matches(rName,nucName+"_Chr.*")){
						cpt++;
					}
				}
				else{
					rName="end";
				}
			}
			if(cpt>1){
				roiManager("Select", chridxarr);
				roiManager("Combine");
				roiManager("add");
				roiManager("Select", roiManager("count")-1);
				roiManager("rename",nucName+"_Chr_"+"sum");
			}
		}
		roiManager("sort");
		setBatchMode(false);
	}
	closeBut(openImg,"id");
	selectImage(id);
	roiManager("Show All with labels");
}
</macro>
</line>

<line>
<button>
label=Show On Projection
icon=noicon
arg=<macro>
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
run("Z Project...", "projection=["+proj+"]");
run("mpl-inferno"); //run("Invert");
roiManager("Show All Without Labels");
</macro>
</line>

<line>
<button>
label=Analyse Selections (2D)
icon=noicon
arg=<macro>
//This will compute nucleus and chromocenter data, compute RHF and store them in a txt file
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
var Starts=call("ij.Prefs.get", "variable.macro.nucleus.Starts", 0);
var Starts=call("ij.Prefs.get","variable.macro.nucleus.Starts",0);
if(Starts==0){
	Starts=newArray(0);
}
else{
	Starts=split(Starts, ",");
}
var Ends=call("ij.Prefs.get", "variable.macro.nucleus.Ends", 0);
if(Ends==0){
	Ends=newArray(0);
}
else{
	Ends=split(Ends, ",");
}
openImg=split(openImg, ",");
id=getImageID();
imgname=getTitle();
//Stop at the first . in image name
shortimgname=split(imgname,".");
shortimgname=shortimgname[0];
endslice=nSlices();
Dialog.create("Results");
Dialog.addString("Result file name:", shortimgname+"_result");
Dialog.addCheckbox("Delete if exit", false);
Dialog.addNumber("Decimal Places:", 9);
Dialog.show();
file=Dialog.getString();
file=file+".txt";
del=Dialog.getCheckbox();
dec=Dialog.getNumber();
path=getDirectory("Choose a Directory");
atf=0;
if(File.exists(path+file)&&del){
	File.delete(path+file);
	openf=File.open(path+file);
}
else if(!File.exists(path+file)){
	openf=File.open(path+file);
}
else {
	atf=1;
}
setBatchMode(true);
param=newArray("Img","Idx","Slices","X","Y","Area","Mean","StdDev","IntDen","Major","Minor","Circ.","AR");
row=newArray(param.length);
if(!atf){
	print(openf,String.join(param,",")+"\n");
}
nuc = -1;
//If start and end slices are not define project over the whole stack
startend=Starts.length>0 && Ends.length>0;
if(!startend){
	selectImage(id);
	start=1;
	end=endslice;
	run("Z Project...", "projection=[Sum Slices]");
	idproj=getImageID();
	selectImage(idproj);
	sumname = getTitle();
	run("Set Measurements...", "redirect=sumname");
}
for(i=0; i<roiManager("count"); ++i){
	run("Clear Results");
	roiManager("select", i);
	rName=Roi.getName();
	row[0]=imgname;
	row[1]=rName;
	//Get the right projection image if the ROI is a nucleus
	if(!matches(rName,".*Chr.*")&&startend){
		//Deselect ROI for the projection
		run("Select None");
		//Project
		selectImage(id);
		nuc = nuc+1;
		start=Starts[nuc];
		end=Ends[nuc];
		run("Z Project...", "start=&start stop=&end projection=[Sum Slices]");
		idproj=getImageID();
		selectImage(idproj);
		sumname = getTitle();
		run("Set Measurements...", "redirect=sumname");
		//Reselect the ROI
		roiManager("select", i);
	}
	row[2]=d2s(start,0)+"-"+d2s(end,0);
	for(j=3; j<param.length; ++j) {
		val=getValue(param[j]);
		row[j]=d2s(val,dec);
	}
	if(atf){
		File.append(String.join(row,","),path+file);
	}
	else{
		print(openf,String.join(row,",")+"\n");
	}
}
print("Results have been saved to: "+path+file);
</macro>
</line>

<line>
<button>
label=Save Annotation
icon=noicon
arg=<macro>
//Save annotation to be used for training neural network also save overlay to check segmentation
var openImg=call("ij.Prefs.get", "variable.macro.nucleus.openImg", "");
var proj=call("ij.Prefs.get","variable.macro.nucleus.proj","Standard Deviation");
openImg=split(openImg, ",");
id=getImageID();
imgname=getTitle();
//Stop at the first . in image name
imgname=split(imgname,".");
prefiximgname=imgname[0];
suffiximgname=split(imgname[imgname.length-1],"-");
suffiximgname=suffiximgname[suffiximgname.length-1];
height=getHeight();
width=getWidth();
setBatchMode(true);
//Folder to save annotations
path=getDirectory("Choose a Directory");
//Projection on all stack for training
run("Z Project...", "projection=[Sum Slices]");
idproj=getImageID();
projname = getTitle();
run("Set Measurements...", "redirect=projname");
//Normalized the image 0 centered and unit variance
run("Select None");
selectImage(idproj);
mean=getValue("Mean raw");
std=getValue("StdDev raw");
run("Subtract...", "value=&mean");
run("Divide...", "value=&std");
resetMinAndMax();
//Rename the image according to the number of image in train folder
if(!File.exists(path+File.separator()+"train")){
	File.makeDirectory(path+File.separator()+"train");
	//If train folder doesn't exist label and overlay should not exist neither
	File.makeDirectory(path+File.separator()+"label");
	File.makeDirectory(path+File.separator()+"overlay");
	cpt=0;
	cpt=nDigitsIndex(cpt,4);
	trainname="train"+"_"+cpt;
	rename(trainname);
	saveAs("tiff", path+File.separator()+"train"+File.separator()+trainname+".tif");
}
else{
	cpt=countFiles(path+File.separator()+"train");
	cpt=nDigitsIndex(cpt,4);
	trainname="train"+"_"+cpt;
	rename(trainname);
	saveAs("tiff", path+File.separator()+"train"+File.separator()+trainname+".tif");
}
//Create a name-array with all nucleus roi
namearr=newArray(0);
allroi=newArray(roiManager("count"));
for(i=0; i<roiManager("count"); ++i){
	allroi[i]=i;
	roiManager("Select",i); 
	rName=Roi.getName();
	if(!matches(rName,".*Chr.*")){
		namearr=appendarr(namearr, i);
	}
}
//Rename and save overlay
selectImage(id);
run("Z Project...", "projection=["+proj+"]");
run("mpl-inferno"); //run("Invert");
roiManager("Show All Without Labels");
run("Flatten");
overlayname=prefiximgname+suffiximgname+"_"+cpt;
Dialog.create("Overlay name");
Dialog.addString("Overlayname name:", overlayname);
Dialog.show();
overlayname=Dialog.getString();
rename(overlayname);
saveAs("tiff", path+File.separator()+"overlay"+File.separator()+overlayname+".tif");
//Initialize label image
labelname="label"+"_"+cpt+"stack";
newImage(labelname, "32-bit black", width, height, 2*namearr.length);
for(n=0; n<namearr.length; ++n){
	i=namearr[n];
	roiManager("Select",i);
	rName=Roi.getName();
	//Find the Chr_sum ROI or the unique Chr
	findroi=rName;
	j=i;
	while(startsWith(findroi,rName)&&j<roiManager("count")-1){
		j++;
		roiManager("Select",j); 
		findroi=Roi.getName();
	}
	if(j!=roiManager("count")-1){
		j--;
	}
	//Labels 0 = background, 1 = Nucleus and 2 = Chromocenter
	roiManager("Select",i);
	run("Create Mask");
	run("Divide...", "value=255");
	rename("1");
	run("Select None");
	run("Copy");
	selectWindow(labelname);
	Stack.setSlice(2*n+1);
	run("Paste");
	roiManager("Select",j);
	run("Create Mask");
	run("Divide...", "value=255");
	rename("2");
	run("Select None");
	run("Copy");
	selectWindow(labelname);
	Stack.setSlice(2*(n+1));
	run("Paste");
}
//Save label image in label folder
selectWindow(labelname);
run("Z Project...", "projection=[Sum Slices]");
labelname="label"+"_"+cpt;
rename(labelname);
saveAs("tiff", path+File.separator()+"label"+File.separator()+labelname+".tif");
print("Annotations have been saved to: "+path);
</macro>
</line>

<line>
<button>
label=Reset
icon=noicon
arg=<macro>
if(nImages()>0) {
	//Get IDs of all opened images
	setBatchMode(true);
	ImgNamearr=newArray(nImages);
	for(i=0; i<nImages; ++i){
		selectImage(i+1);
		temp=getImageID();
		ImgNamearr[i]=temp;
	}
	call("ij.Prefs.set", "variable.macro.nucleus.openImg", String.join(ImgNamearr,","));
	run("Select None");
	run("Remove Overlay");
	setBatchMode(false);
}
roiManager("reset");
run("Set Measurements...", "redirect=None");
call("ij.Prefs.set", "variable.macro.nucleus.nNuc", 0);
call("ij.Prefs.set", "variable.macro.nucleus.Starts", 0);
call("ij.Prefs.set", "variable.macro.nucleus.Ends", 0);
</macro>
</line>
